[{"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/index.tsx":"1","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/reportWebVitals.ts":"2","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/App.tsx":"3","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/data.ts":"4","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/Viz.tsx":"5","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/VizInputs.tsx":"6","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/datumToSpiral.ts":"7","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/datumFromList.ts":"8","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/datumToRectangle.ts":"9","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/useSimulation.ts":"10","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/RangeInput.tsx":"11","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/useD3RootSvg.ts":"12","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/useD3Elements.ts":"13","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/datumToX_2.ts":"14","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/util/useLocalStorage.ts":"15"},{"size":500,"mtime":1609538580297,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1609538580298,"results":"18","hashOfConfig":"17"},{"size":2014,"mtime":1611172875233,"results":"19","hashOfConfig":"17"},{"size":4803,"mtime":1612080217564,"results":"20","hashOfConfig":"17"},{"size":2908,"mtime":1612064990014,"results":"21","hashOfConfig":"17"},{"size":7160,"mtime":1611193342870,"results":"22","hashOfConfig":"17"},{"size":520,"mtime":1611053173240,"results":"23","hashOfConfig":"17"},{"size":596,"mtime":1611165669336,"results":"24","hashOfConfig":"17"},{"size":403,"mtime":1610135972115,"results":"25","hashOfConfig":"17"},{"size":9192,"mtime":1611165719255,"results":"26","hashOfConfig":"17"},{"size":2686,"mtime":1611164350897,"results":"27","hashOfConfig":"17"},{"size":2477,"mtime":1611051542637,"results":"28","hashOfConfig":"17"},{"size":4219,"mtime":1611052341889,"results":"29","hashOfConfig":"17"},{"size":874,"mtime":1611126830907,"results":"30","hashOfConfig":"17"},{"size":1629,"mtime":1611122311902,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"88mpz7",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"34"},"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/index.tsx",[],["72","73"],"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/reportWebVitals.ts",[],"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/App.tsx",["74","75"],"import React, {useMemo} from 'react';\nimport './App.css';\nimport {Viz} from './Viz';\nimport {useData} from './data';\nimport {VizInputs} from './VizInputs';\n\nfunction App() {\n    let {\n            props:     props,\n            Component: InputToggles,\n        } = VizInputs();\n\n    const {\n              radius,\n              radialDecay,\n              nodeStrength,\n              linkStrength,\n              height,\n              width,\n              offsetX,\n              offsetY,\n              steps,\n              count,\n              colorsCount,\n              theta,\n              centeringForce,\n              svgWidth,\n              svgHeight,\n          } = props;\n\n    const svgSize  = {width: svgWidth, height: svgHeight};\n    const nodeInfo = {count, steps, theta, radius, radialDecay};\n    const data     = useData('list_1', nodeInfo, svgSize);\n    const links    = useMemo(() =>\n                                 [\n                                     {source: 1, target: 0},\n                                 ], [data]);\n    return (\n        <div className=\"App\">\n            <div className=\"App-wrapper\">\n                <div style={{width: '50%'}}>\n                    <Viz\n                        forces={{\n                            center: !!centeringForce,\n                        }}\n                        data={data}\n                        links={links}\n                        nodeStrength={nodeStrength}\n                        linkStrength={linkStrength}\n                        radius={radius}\n                        radialDecay={radialDecay}\n                        colorsCount={colorsCount}\n                        svgHeight={svgHeight}\n                        svgWidth={svgWidth}\n                        offsetX={offsetX}\n                        offsetY={offsetY}\n                        width={width}\n                        height={height}\n                    />\n                </div>\n                {InputToggles}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/data.ts",["76","77","78","79"],"import * as d3 from 'd3';\nimport {DataCalculationPoint, Datum, DatumPrimaryKey} from './data.types';\nimport {datumFromList} from './datumFromList';\nimport {datumToRectangle} from './datumToRectangle';\nimport {datumToSpiral} from './datumToSpiral';\nimport {useEffect, useMemo, useState} from 'react';\nimport {datumToX_2} from './datumToX_2';\n\nexport const d_selectIndex  = (d: Datum | undefined) => d?.i;\nexport const d_Id           = (d: Datum | undefined): DatumPrimaryKey | undefined => d_selectIndex(d);\nexport const d_selectX      = (d: Datum | undefined) => d?.x;\nexport const d_selectY      = (d: Datum | undefined) => d?.y;\nexport const d_selectRadius = (d: Datum | undefined) => d?.r || 1;\n\nexport const getDataFillFn = (n: number) => (d: Datum, i: number) => d3.interpolateRainbow((d_selectIndex(d) || 1) / n);\n\n\nconst options: { [key: string]: (d: DataCalculationPoint) => Datum | undefined } =\n          {\n              spiral: datumToSpiral,\n              x_2:    datumToX_2,\n              square: datumToRectangle,\n              list_1: datumFromList,\n              line:   ({count, radius = 5, index: i}: DataCalculationPoint) => {\n                  return {\n                      x: i * 2 * radius,\n                      y: -i * 2 * radius,\n                      i,\n                      r: radius,\n                  }\n\n              },\n          };\n\n\ntype GeneratedDataOption = keyof typeof options;\n\nfunction createNodes(\n    choice: GeneratedDataOption,\n    count: number,\n    theta: number,\n    radialDecay: number | undefined,\n    width: number,\n    height: number,\n    radius: number | undefined,\n    steps: number,\n): Datum[] {\n    return Array.from({length: count},\n                      (_, index) => {\n                          const thetaMultiplier            = theta * index;\n                          let fn                           = [\n                              ((index || 1) ** 2) / ((radialDecay || 1) * count || 1),\n                              Math.pow((index || 1) ** .5, -(radialDecay || 0) / 100) || 1,\n                          ][1];\n                          const radiusMultiplier           = radialDecay ? fn : 1;\n                          let scaledIndex                  = index / count;\n                          const args: DataCalculationPoint =\n                                    {\n                                        count,\n                                        width,\n                                        height,\n                                        index,\n                                        radius,\n                                        steps,\n                                        theta,\n                                        scaledIndex,\n                                        thetaMultiplier,\n                                        radiusMultiplier: isFinite(radiusMultiplier) ? radiusMultiplier : 100,\n                                    };\n                          if (!options[choice]) {\n                              throw new Error(`Missing option for ${choice}`)\n                          }\n                          return options[choice](args);\n                      })\n                .filter(i => i !== undefined) as Datum[];\n}\n\ntype NodeInfo = { steps: number, theta: number, radialDecay?: number, radius?: number, count: number, };\n\n/**\n * ToDo: mutate the data instead of reinitializing it everytime one of the parameters changes\n */\nexport function useData(strategy: GeneratedDataOption,\n                        nodeInfo: NodeInfo,\n                        {width, height}: { width: number, height: number },\n): Datum[] {\n    const radius = nodeInfo.radius ?? 5;\n\n    const [prev, setPrev] = useState<NodeInfo & { strategy: GeneratedDataOption }>();\n    useEffect(\n        () => { setPrev({...nodeInfo, strategy}) },\n        [...Object.values(nodeInfo), strategy],\n    );\n\n    const changed =\n              (nodeInfo.theta !== prev?.theta) ||\n              (nodeInfo.steps !== prev?.steps) ||\n              (nodeInfo.radialDecay !== prev?.radialDecay);\n\n    const nodes =\n              useMemo(\n                  () => createNodes(strategy,\n                                    nodeInfo.count,\n                                    nodeInfo.theta,\n                                    nodeInfo.radialDecay,\n                                    width,\n                                    height,\n                                    nodeInfo.radius ?? 5,\n                                    nodeInfo.steps),\n                  [changed],\n              );\n\n    useEffect(() => {\n        if (!prev?.radius || !nodes.length) return;\n        const difference = radius - prev.radius;\n        if (!difference) return;\n        nodes.map(node => node.r += difference);\n    }, [prev?.radius, radius]);\n\n    return nodes;\n}","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/Viz.tsx",["80","81"],"import React, {useEffect, useMemo, useRef} from 'react';\nimport {SimSettings, useSimulation} from './useSimulation';\nimport {Height, ViewBox, Width} from './viz.types';\nimport {Datum, LinkDefinition} from './data.types';\n\ntype VizParams = {\n    data: Datum[],\n    links: LinkDefinition[],\n    forces?: { center?: boolean };\n    svgHeight?: number,\n    svgWidth?: number,\n    strength?: number,\n    radius?: number,\n    radialDecay?: number,\n    offsetX?: number,\n    offsetY?: number,\n    width?: number,\n    height?: number,\n    colorsCount?: number,\n    linkStrength?: number,\n    nodeStrength?: number,\n};\n\nexport function Viz(props: VizParams) {\n    const ref: React.MutableRefObject<HTMLDivElement | null> = useRef(null);\n\n    const width: Width            = props.width || 1;\n    const height: Height          = props.height || 1;\n    const data: Datum[]           = props.data;\n    const links: LinkDefinition[] = props.links;\n    const radius: number          = props.radius || 1;\n    const radialDecay: number     = props.radialDecay || 1;\n    const colors                  = props.colorsCount || 360;\n    const linkStrength            = props.linkStrength || 0;\n    const nodeStrength            = props.nodeStrength || 0;\n\n    const viewBox: ViewBox =\n              [\n                  props.offsetX || 0,\n                  props.offsetY || 0,\n                  props.svgWidth || 100,\n                  props.svgHeight || 100,\n              ];\n\n    let simSettings        = useMemo(() => {\n                                         // return undefined;\n                                         return ({\n                                             nodeForceStrength: nodeStrength,\n                                             center:            (props.forces?.center ?? true) ? [width / 2, height / 2] : undefined,\n                                             nodeLinkStrength:  linkStrength,\n                                         } as SimSettings)\n                                     },\n                                     [nodeStrength, width, height, linkStrength],\n    );\n    const sim              =\n              useSimulation(\n                  viewBox,\n                  {data, links},\n                  {radius, radialDecay, colors, animation: 'random'},\n                  props.forces ? simSettings : undefined,\n              );\n    const simSettingSpread = [\n        simSettings?.nodeForceStrength,\n        simSettings?.nodeLinkStrength,\n        simSettings?.center,\n    ];\n\n    useEffect(\n        () => {\n            const div = ref.current;\n            if (!div || !sim) return;\n            div.appendChild(sim)\n            return () => {\n                div.removeChild(sim)\n            }\n        },\n        [ref.current, sim, simSettingSpread],\n    );\n\n    return (\n        <div ref={ref} style={{width: `${width}px`, height: `${height}px`, border: 'thin solid tan'}}/>\n    )\n}","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/VizInputs.tsx",[],"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/datumToSpiral.ts",[],"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/datumFromList.ts",[],"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/datumToRectangle.ts",[],"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/useSimulation.ts",["82","83","84","85","86","87","88","89","90","91"],"import * as d3 from 'd3';\nimport {ValueFn} from 'd3';\nimport {useCallback, useEffect, useState} from 'react';\nimport {useD3RootSvg} from './useD3RootSvg';\nimport {ViewBox} from './viz.types';\nimport {Datum, Link, SvgCircleSelection, SvgLineSelection} from './data.types';\nimport {Information, Style, useD3Elements} from './useD3Elements';\n\n\ntype GenericValueFn = ValueFn<any, any, any>;\n\nexport interface SimSettings {\n    boundingBox?: boolean;\n    nodeForceStrength: number;\n    center?: [number, number];\n    nodeLinkStrength: number\n}\n\nconst getDragged =\n          (simulation: d3.Simulation<any, any>, link: SvgLineSelection) =>\n              function dragged(this: Element, event: DragEvent, d: Datum) {\n                  d.fx = event.x;\n                  d.fy = event.y;\n\n                  // simulation.alpha(1).restart();\n\n                  d3.select(this).attr('cx', d.x).attr('cy', d.y);\n                  link.filter((function (l: Link) { return l?.source === d; } as GenericValueFn)).attr('x1', d.x).attr('y1', d.y);\n                  link.filter((function (l: Link) { return l?.target === d; } as GenericValueFn)).attr('x2', d.x).attr('y2', d.y);\n              }\n\n\ntype NDimensionalTuple_2 = [number, number];\n\nfunction o_Width(offset: [number, number, number, number]) {\n    return offset[2];\n}\n\nfunction o_Height(offset: [number, number, number, number]) {\n    return offset[3];\n}\n\nexport function useSimulation(offset: ViewBox, information: Information, style: Style, simSettings?: SimSettings ) {\n    const simSettingSpread            = [simSettings?.nodeForceStrength, simSettings?.nodeForceStrength, simSettings?.center];\n    const {_circles, _links}          = useD3Elements(information, style, simSettings);\n    const [simulation, setSimulation] = useState<d3.Simulation<any, any>>();\n\n    const {\n              selection:  svg,\n              components: [\n                              {setData: setLinkData, itemSelector: selectLinks},\n                              {setData: setCircleData, itemSelector: selectCircles},\n                          ],\n          } =\n              useD3RootSvg(offset, information, [_links, _circles]);\n\n\n    const update =\n              useCallback(\n                  () => {\n                      /* initialize elements */\n\n                      let links: SvgLineSelection | undefined;\n                      if (svg && information.links) links = setLinkData(svg, _links.data);\n\n                      let circles: SvgCircleSelection | undefined;\n                      if (svg && information.data) circles = setCircleData(svg, _circles.data);\n\n                      /* remove elements */\n\n                      {\n                          links?.exit().remove();\n                          circles?.exit().remove();\n                      }\n\n\n                      /* update */\n\n                      {\n\n                          _links.format(links as SvgLineSelection);\n                          _links.format(links?.enter().append('line').merge(links) as SvgLineSelection);\n                          // @ts-ignore\n                          let drag = d3.drag().on('drag', getDragged(simulation, links));\n\n\n                          // @ts-ignore\n                          circles?.call(drag)\n\n\n                          _circles.format(circles, simulation);\n                          _circles.format(circles?.enter().append('circle'),\n                                          simulation);\n                      }\n\n                  },\n                  [\n                      information.data,\n                      information.links,\n                      style.radius,\n                      _circles.format,\n                      setCircleData,\n                      ...simSettingSpread,\n                  ],\n              );\n\n    // useEffect(update, [])\n\n    useEffect(() => {\n                  _circles.format(selectCircles(svg))\n                  _links.format(selectLinks(svg))\n\n                  if (svg) svg.attr('viewBox', offset.join(' '))\n              },\n              [style.radius, offset])\n\n    const useTheForce =\n              useCallback(\n                  () => {\n                      if (!simSettings) return;\n                      let _simulation = d3.forceSimulation(information.data).alphaDecay(0);\n\n                      let nodeForceStrength = simSettings.nodeForceStrength || 0;\n                      if (nodeForceStrength) {\n                          _simulation = _simulation.force('charge',\n                                                          d3.forceManyBody()\n                                                              // Sim moves slowly when strength is a function\n                                                            .strength(nodeForceStrength));\n\n                      }\n\n                      let width  = o_Width(offset);\n                      let height = o_Height(offset);\n\n                      let xOffset = offset[0];\n                      let yOffset = offset[1];\n                      if (simSettings.center !== undefined) {\n                          const centerOptions:\n                                    {\n                                        none: false,\n                                        zero: NDimensionalTuple_2,\n                                        offset: NDimensionalTuple_2,\n                                        negativeOffset: NDimensionalTuple_2,\n                                        halfSvgSize: NDimensionalTuple_2,\n                                        svgSize: NDimensionalTuple_2,\n                                    }                                 =\n                                    {\n                                        none:           false,\n                                        zero:           [0, 0],\n                                        offset:         [xOffset, yOffset],\n                                        negativeOffset: [-xOffset, -offset[1]],\n                                        halfSvgSize:    [width, height].map(i => i / 2) as NDimensionalTuple_2,\n                                        svgSize:        [width, height],\n                                    };\n                          const shortcutOptions                       = ['none', 'zero', 'offset', 'negativeOffset', 'halfSvgSize', 'svgSize'] as (keyof typeof centerOptions)[];\n                          let choice                                  = 5;\n                          const centeringOption                       = (shortcutOptions[choice] as keyof typeof centerOptions);\n                          const center: NDimensionalTuple_2 | boolean = centerOptions[centeringOption];\n\n                          if (center) {\n                              _simulation = _simulation.force('center', d3.forceCenter(...center).strength(.005));\n                          }\n                      }\n\n                      if (simSettings.boundingBox === undefined) {\n                          _simulation = _simulation.force('box', function box_force() {\n                              for (var i = 0, n = information.data.length; i < n; ++i) {\n                                  const curr_node = information.data[i] as Datum;\n                                  let radius      = curr_node.r;\n                                  curr_node.x     =\n                                      Math.max(\n                                          xOffset + radius,\n                                          Math.min(\n                                              (width + xOffset) - radius,\n                                              curr_node.x,\n                                          ),\n                                      );\n                                  curr_node.y     =\n                                      Math.max(\n                                          yOffset + radius,\n                                          Math.min(\n                                              (height + yOffset) - radius,\n                                              curr_node.y,\n                                          ),\n                                      );\n                              }\n                          })\n                      }\n\n\n                      let nodeLinkStrength = simSettings.nodeLinkStrength;\n                      if (nodeLinkStrength) {\n                          _simulation =\n                              _simulation.force('link',\n                                                d3.forceLink()\n                                                  .links(information.links)\n                                                  .strength(nodeLinkStrength))\n                                         .on('tick', () => update());\n                      }\n                      simulation?.alphaTarget(.9).restart();\n                      setSimulation(_simulation);\n                  },\n                  [information.data, information.links, ...offset, update, ...simSettingSpread],\n              );\n    useEffect(useTheForce, [simSettings, information.data, information.links]);\n    useEffect(() => {\n        simulation?.alphaTarget(.9).restart();\n    }, [simSettings, !!simulation])\n\n    return svg ? svg.node() : null;\n}","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/RangeInput.tsx",["92","93"],"import React, {useEffect, useState} from 'react';\n\nexport function RangeInput(\n    {step = 1, title, max = 5, min = 0, controller: [value, setValue]}:\n        { title?: string, min?: number, max?: number, step?: number, controller: [number, (n: number) => any] },\n) {\n    const bottom   = '10px';\n    const inputRef = React.createRef<HTMLDivElement>();\n    useEffect(\n        () => {\n            const el = inputRef.current;\n            if (!el) return;\n\n            let wheel = (e: WheelEvent): void => {\n                e.preventDefault();\n                const v = value + (step * Math.round(e.deltaY ));\n                setValue(Math.max(Math.min(v, max), min));\n            };\n            el.addEventListener('wheel', wheel);\n\n            return () => el.removeEventListener('wheel', wheel)\n        },\n        [value, min, max],\n    );\n    const [o, setO] = useState(false);\n\n    const [width, setWidth] = useState(300);\n\n\n    let percentage = value / ((max - min) || 1);\n    return (\n        <div\n            ref={inputRef}\n            style={{\n                borderBottom:  'thin solid rgba(255, 255, 255, .3)',\n                paddingBottom: bottom,\n                paddingTop:    bottom,\n                position:      'relative',\n                fontSize:      '10px',\n                width:         width + 'px',\n            }}>\n            <div style={{display: 'flex', flexDirection: 'column', fontSize: '10px', alignItems: 'center'}}>\n                <div style={{\n                    height:        '100%',\n                    width:         (width * Math.abs(percentage)) + 'px',\n                    position:      'absolute',\n                    top:           0,\n                    pointerEvents: 'none',\n                    background:    value > 0 ? 'white' : 'red',\n                    opacity:       .3,\n                }}/>\n                <strong onClick={e => setO(!o)}>{title}</strong>\n                {\n                    !o ? <span style={{position: 'absolute', right: 0}}>{`${value}`}</span>\n                       : <span>{`${value}`}</span>\n                }\n            </div>\n            <div style={{display: o ? 'flex' : 'none', position: 'absolute', width: '100%', top: 0, color: 'gray'}}>\n                <div className=\"number\">{min}</div>\n                <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setValue(parseInt(e.target.value))}\n                    type=\"range\"\n                    min={min} max={max} value={value} step={step}\n                    style={{width: '100%', visibility: 'hidden', height: 0}}/>\n                <div className=\"number\">{max}</div>\n            </div>\n        </div>\n    );\n}","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/useD3RootSvg.ts",[],"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/useD3Elements.ts",["94"],"import {Datum, LinkDefinition, SvgCircleSelection, SvgLineSelection, SvgSelection} from './data.types';\nimport * as d3 from 'd3';\nimport {ValueFn} from 'd3';\nimport {useCallback, useMemo} from 'react';\nimport {d_selectRadius, d_selectX, d_selectY, getDataFillFn} from './data';\nimport {D3Component} from './useD3RootSvg';\nimport {SimSettings} from './useSimulation';\n\ntype L = { source: Datum, target: Datum };\n\nexport type Information = { data: Datum[], links: LinkDefinition[] };\n\nexport type Style = {\n    radius: number,\n    colors?: number,\n    animation?: 'random',\n    radialDecay?: number\n};\n\nexport function useD3Elements(information: Information, style: Style, simSettings?: SimSettings) {\n    type GenericValueFn = ValueFn<any, any, any>;\n    const _circles: D3Component<SvgCircleSelection> =\n              {\n                  data: information.data,\n                  init(_svg: SvgSelection) {\n                      _svg.append('g').attr('class', 'circles');\n                      const circles = this.setData(_svg, information.data);\n                      if (circles) this.element.format((circles as SvgCircleSelection).join('circle'));\n                  },\n                  format:\n                        useCallback(\n                            (circles?: SvgCircleSelection, simulation?:d3.Simulation<any, any>) => {\n                                let out = circles\n                                    ?.attr('cx', ((d: Datum) => d_selectX(d)) as GenericValueFn)\n                                    .attr('cy', ((d: Datum) => d_selectY(d)) as GenericValueFn)\n                                    .attr('r', (d) => d_selectRadius(d) || style.radius)\n                                    .attr('fill', getDataFillFn(style.colors || 30) as GenericValueFn);\n\n                                if (simulation) {\n                                    let click = (event: d3.D3DragEvent<any, any, any>, d: Datum) => {\n                                        delete d.fx;\n                                        delete d.fy;\n                                        simulation?.alphaTarget(.9).restart();\n                                        console.log(d);\n                                    }\n\n                                    // @ts-ignore\n                                    out?.on('click', click);\n\n                                }\n                                return out;\n                            },\n                            [style.colors, style.radius],\n                        ),\n                  select:\n                        useMemo(() => (svg: SvgSelection) => (svg.select('g.circles').selectAll('circle') as unknown as SvgCircleSelection), []),\n              };\n\n    const _links: D3Component<SvgLineSelection> =\n              {\n                  data: information.links,\n                  init(_svg: SvgSelection) {\n                      _svg.append('g').attr('class', 'links');\n                      const links = this.setData(_svg, information.links);\n                      if (links) this.element.format((links as SvgLineSelection).join('line'));\n                  },\n                  format:\n                        useCallback(\n                            (links?: SvgLineSelection) => {\n                                return links\n                                    ?.attr('stroke', '#cccccc')\n                                    .attr('stroke-width', (10 * Math.abs((simSettings?.nodeLinkStrength || .1))) + 'px')\n                                    .attr('x1', ((l: L) => l.source?.x) as GenericValueFn)\n                                    .attr('y1', ((l: L) => l.source?.y) as GenericValueFn)\n                                    .attr('x2', ((l: L) => l.target?.x) as GenericValueFn)\n                                    .attr('y2', ((l: L) => l.target?.y) as GenericValueFn);\n                            },\n                            [information.links, information.data, simSettings?.nodeLinkStrength],\n                        )\n                  ,\n                  select:\n                        useMemo(() => (svg: SvgSelection) => (svg.select('g.links').selectAll('line') as unknown as SvgLineSelection), []),\n              };\n    return {_circles, _links};\n}",["95","96"],"/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/datumToX_2.ts",["97","98"],"import {DataCalculationPoint, Datum} from './data.types';\n\nexport function datumToX_2({\n                               steps = 12,\n                               width = 100,\n                               height = 100,\n                               radius = 0,\n                               radiusMultiplier = 1,\n                               theta = 1,\n                               thetaMultiplier = 0,\n                               index = 0,\n                               count = 1,\n                           }: DataCalculationPoint,\n): Datum {\n    const distance = steps * Math.sqrt(index + 0.5);\n\n    const horizontalDivisions = (count || 1) / width;\n    console.log(count, width)\n    return {\n        x: 10 * index * (theta/10),\n        y: -(index ** 2) * (steps/100),\n        i: index,\n        r: radius * radiusMultiplier,\n        radiusMultiplier,\n    };\n}","/Users/samwashington/WebstormProjects/playground/visualization/practice-1/graph/src/util/useLocalStorage.ts",["99"],"import {useCallback, useEffect, useState} from 'react';\n\nconst getKey = (key: string, initialValue: any) => {\n    try {\n        const item = global.localStorage?.getItem(key);\n        return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n        console.log(error);\n        return initialValue;\n    }\n};\n\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (t: T) => any] {\n    const [storedValue, setStoredValue] = useState<T>(() => getKey(key, initialValue));\n\n    useEffect(() => setStoredValue(getKey(key, initialValue)), [key])\n\n    const setValue = useCallback((value: Function | T) => {\n        try {\n            const valueToStore =\n                      typeof value === 'function'\n                      ? (value as Function)(storedValue)\n                      : value;\n            setStoredValue(valueToStore);\n\n            let cache: any[] = [];\n\n            const serialized\n                      =\n                      JSON.stringify(valueToStore, (key, value) => {\n                          if (typeof value === 'object' && value !== null) {\n                              // Duplicate reference found, discard key\n                              if (cache.includes(value)) return;\n\n                              // Store value in our collection\n                              cache.push(value);\n                          }\n                          return value;\n                      });\n\n            global.localStorage?.setItem(key, serialized);\n        } catch (error) {\n            console.log(error);\n        }\n    }, [storedValue, key]);\n\n    return [storedValue, setValue];\n}\n",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":9,"column":13,"nodeType":"106","messageId":"107","endLine":9,"endColumn":29,"fix":"108"},{"ruleId":"109","severity":1,"message":"110","line":37,"column":37,"nodeType":"111","endLine":37,"endColumn":43,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":92,"column":9,"nodeType":"111","endLine":92,"endColumn":47,"suggestions":"114"},{"ruleId":"109","severity":1,"message":"115","line":92,"column":10,"nodeType":"116","endLine":92,"endColumn":36},{"ruleId":"109","severity":1,"message":"117","line":110,"column":19,"nodeType":"111","endLine":110,"endColumn":28,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"119","line":118,"column":8,"nodeType":"111","endLine":118,"endColumn":30,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"121","line":53,"column":38,"nodeType":"111","endLine":53,"endColumn":81,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"123","line":77,"column":9,"nodeType":"111","endLine":77,"endColumn":45,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":71,"column":23,"nodeType":"127","messageId":"128","endLine":74,"endColumn":24},{"ruleId":"109","severity":1,"message":"129","line":97,"column":19,"nodeType":"111","endLine":104,"endColumn":20,"suggestions":"130"},{"ruleId":"109","severity":1,"message":"131","line":103,"column":23,"nodeType":"116","endLine":103,"endColumn":42},{"ruleId":"109","severity":1,"message":"132","line":115,"column":15,"nodeType":"111","endLine":115,"endColumn":37,"suggestions":"133"},{"ruleId":"109","severity":1,"message":"134","line":203,"column":19,"nodeType":"111","endLine":203,"endColumn":96,"suggestions":"135"},{"ruleId":"109","severity":1,"message":"131","line":203,"column":57,"nodeType":"116","endLine":203,"endColumn":66},{"ruleId":"109","severity":1,"message":"131","line":203,"column":76,"nodeType":"116","endLine":203,"endColumn":95},{"ruleId":"109","severity":1,"message":"136","line":205,"column":5,"nodeType":"137","endLine":205,"endColumn":14,"suggestions":"138"},{"ruleId":"109","severity":1,"message":"139","line":208,"column":8,"nodeType":"111","endLine":208,"endColumn":35,"suggestions":"140"},{"ruleId":"109","severity":1,"message":"141","line":208,"column":22,"nodeType":"142","endLine":208,"endColumn":34},{"ruleId":"109","severity":1,"message":"143","line":23,"column":9,"nodeType":"111","endLine":23,"endColumn":26,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":27,"column":19,"nodeType":"137","messageId":"147","endLine":27,"endColumn":27},{"ruleId":"109","severity":1,"message":"148","line":78,"column":29,"nodeType":"111","endLine":78,"endColumn":97,"suggestions":"149"},{"ruleId":"100","replacedBy":"150"},{"ruleId":"102","replacedBy":"151"},{"ruleId":"145","severity":1,"message":"152","line":15,"column":11,"nodeType":"137","messageId":"147","endLine":15,"endColumn":19},{"ruleId":"145","severity":1,"message":"153","line":17,"column":11,"nodeType":"137","messageId":"147","endLine":17,"endColumn":30},{"ruleId":"109","severity":1,"message":"154","line":16,"column":64,"nodeType":"111","endLine":16,"endColumn":69,"suggestions":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-useless-rename","Destructuring assignment props unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"158","text":"159"},"react-hooks/exhaustive-deps","React Hook useMemo has an unnecessary dependency: 'data'. Either exclude it or remove the dependency array.","ArrayExpression",["160"],"React Hook useEffect has a missing dependency: 'nodeInfo'. Either include it or remove the dependency array. If 'setPrev' needs the current value of 'nodeInfo', you can also switch to useReducer instead of useState and read 'nodeInfo' in the reducer.",["161"],"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","SpreadElement","React Hook useMemo has missing dependencies: 'height', 'nodeInfo.count', 'nodeInfo.radialDecay', 'nodeInfo.radius', 'nodeInfo.steps', 'nodeInfo.theta', 'strategy', and 'width'. Either include them or remove the dependency array.",["162"],"React Hook useEffect has a missing dependency: 'nodes'. Either include it or remove the dependency array.",["163"],"React Hook useMemo has a missing dependency: 'props.forces?.center'. Either include it or remove the dependency array.",["164"],"React Hook useEffect has an unnecessary dependency: 'ref.current'. Either exclude it or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["165"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useCallback has missing dependencies: '_circles', '_links', 'setLinkData', 'simulation', and 'svg'. Either include them or remove the dependency array.",["166"],"React Hook useCallback has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has missing dependencies: '_circles', '_links', 'selectCircles', 'selectLinks', and 'svg'. Either include them or remove the dependency array.",["167"],"React Hook useCallback has missing dependencies: 'offset', 'simSettings', and 'simulation'. Either include them or remove the dependency array.",["168"],"React Hook useEffect has a missing dependency: 'useTheForce'. Either include it or remove the dependency array.","Identifier",["169"],"React Hook useEffect has a missing dependency: 'simulation'. Either include it or remove the dependency array.",["170"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","UnaryExpression","React Hook useEffect has missing dependencies: 'inputRef', 'setValue', and 'step'. Either include them or remove the dependency array. If 'setValue' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["171"],"@typescript-eslint/no-unused-vars","'setWidth' is assigned a value but never used.","unusedVar","React Hook useCallback has unnecessary dependencies: 'information.data' and 'information.links'. Either exclude them or remove the dependency array.",["172"],["156"],["157"],"'distance' is assigned a value but never used.","'horizontalDivisions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initialValue'. Either include it or remove the dependency array. If 'setStoredValue' needs the current value of 'initialValue', you can also switch to useReducer instead of useState and read 'initialValue' in the reducer.",["173"],"no-global-assign","no-unsafe-negation",[196,212],"props",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: []",{"range":"202","text":"203"},"Update the dependencies array to be: [nodeInfo, strategy]",{"range":"204","text":"205"},"Update the dependencies array to be: [height, nodeInfo.count, nodeInfo.radialDecay, nodeInfo.radius, nodeInfo.steps, nodeInfo.theta, strategy, width]",{"range":"206","text":"207"},"Update the dependencies array to be: [nodes, prev.radius, radius]",{"range":"208","text":"209"},"Update the dependencies array to be: [nodeStrength, props.forces?.center, width, height, linkStrength]",{"range":"210","text":"211"},"Update the dependencies array to be: [sim, simSettingSpread]",{"range":"212","text":"213"},"Update the dependencies array to be: [svg, information.links, information.data, setLinkData, _links, setCircleData, _circles, simulation]",{"range":"214","text":"215"},"Update the dependencies array to be: [style.radius, offset, _circles, selectCircles, svg, _links, selectLinks]",{"range":"216","text":"217"},"Update the dependencies array to be: [information.data, information.links, offset, simSettings, simulation, update]",{"range":"218","text":"219"},"Update the dependencies array to be: [useTheForce]",{"range":"220","text":"221"},"Update the dependencies array to be: [simSettings, simulation]",{"range":"222","text":"223"},"Update the dependencies array to be: [value, min, max, inputRef, step, setValue]",{"range":"224","text":"225"},"Update the dependencies array to be: [simSettings?.nodeLinkStrength]",{"range":"226","text":"227"},"Update the dependencies array to be: [initialValue, key]",{"range":"228","text":"229"},[1024,1030],"[]",[3823,3861],"[nodeInfo, strategy]",[4517,4526],"[height, nodeInfo.count, nodeInfo.radialDecay, nodeInfo.radius, nodeInfo.steps, nodeInfo.theta, strategy, width]",[4758,4780],"[nodes, prev.radius, radius]",[2040,2083],"[nodeStrength, props.forces?.center, width, height, linkStrength]",[2738,2774],"[sim, simSettingSpread]",[3510,3767],"[svg, information.links, information.data, setLinkData, _links, setCircleData, _circles, simulation]",[4040,4062],"[style.radius, offset, _circles, selectCircles, svg, _links, selectLinks]",[8873,8950],"[information.data, information.links, offset, simSettings, simulation, update]",[8996,9046],"[useTheForce]",[9125,9152],"[simSettings, simulation]",[815,832],"[value, min, max, inputRef, step, setValue]",[3888,3956],"[simSettings?.nodeLinkStrength]",[559,564],"[initialValue, key]"]